package ru.sstu.cnr.core;

import java.util.List;

import ru.sstu.images.analysis.Image;
import ru.sstu.images.analysis.Peak;
import ru.sstu.images.analysis.Projection;
import ru.sstu.ocr.core.CharacterSample;

/**
 * <code>RecognizerListener</code> interface implementations can
 * listens recognition events generated by {@link CarNumberRecognizer}.
 *
 * @author Denis_Murashev
 * @since CNR 1.0
 */
public interface RecognizerListener {

	/**
	 * The recognition process was started.
	 * Source image was loaded.
	 *
	 * @param image loaded image
	 */
	void started(Image image);

	/**
	 * The image was grayed.
	 *
	 * @param image grayed image
	 */
	void grayed(Image image);

	/**
	 * The vertical edges were selected on image.
	 *
	 * @param image image with vertical edges selected
	 */
	void verticalEdgesSelected(Image image);

	/**
	 * The vertical projection was calculated on image.
	 *
	 * @param projection vertical initial image projection
	 * @param peaks      peaks found on projection
	 */
	void verticalProjection(Projection projection, List<Peak> peaks);

	/**
	 * The horizontal band was selected on image.
	 *
	 * @param image      image with horizontal band
	 */
	void horizontalBandSelected(Image image);

	/**
	 * The horizontal edges were selected on band.
	 *
	 * @param image image with horizontal edges selected
	 */
	void horizontalEdgesSelected(Image image);

	/**
	 * The horizontal projection was calculated on band.
	 *
	 * @param projection horizontal projection of band
	 * @param peaks      peaks found on projection
	 */
	void horizontalProjection(Projection projection, List<Peak> peaks);

	/**
	 * The images for single symbols were selected on band.
	 *
	 * @param images the list of selected images
	 */
	void symbolImagesSelected(List<Image> images);

	/**
	 * The images for single symbols were converted to black and white colors.
	 *
	 * @param samples the list of character samples
	 */
	void characterSamplesCreated(List<CharacterSample> samples);
}
